import type { Express } from "express";
import { createServer, type Server } from "http";
import licenseRoutes from "./routes/licenses";
import bcrypt from "bcrypt";
import storage from "./storage";
import {
  insertUserSchema,
  loginSchema,
  registerSchema,
  changePasswordSchema,
  changeEmailSchema,
  insertServerSchema,
  insertTariffSchema,
  insertPromocodeSchema,
  insertSupportTicketSchema,
  updateSupportTicketSchema,
  insertSupportMessageSchema,
  updateSiteSettingSchema,
  updateBotSettingSchema,
} from "@shared/schema";
import {
  handleTelegramUpdate,
  sendTelegramMessage,
  generateLinkCode,
  generate2FACode,
  type TelegramUpdate,
} from "./telegram-bot";

declare module "express-session" {
  interface SessionData {
    userId?: number;
    requires2FA?: boolean;
    pendingUserId?: number;
  }
}

const requireAuth = (req: any, res: any, next: any) => {
  if (!req.session.userId) {
    return res.status(401).json({ message: "Unauthorized" });
  }
  next();
};

const requireAdmin = (req: any, res: any, next: any) => {
  if (!req.session.userId) {
    return res.status(401).json({ message: "Unauthorized" });
  }
  const user = storage.users.findById(req.session.userId);
  if (!user || user.is_admin !== 1) {
    return res.status(403).json({ message: "Forbidden" });
  }
  next();
};

export function registerRoutes(app: Express): Server {
  app.post("/api/auth/register", async (req, res) => {
    try {
      const validatedData = registerSchema.parse(req.body);
      
      const existingUser = storage.users.findByEmail(validatedData.email);
      if (existingUser) {
        return res.status(400).json({ message: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
      }

      const hashedPassword = await bcrypt.hash(validatedData.password, 10);

      const user = storage.users.create({
        email: validatedData.email,
        password: hashedPassword,
        telegram_id: validatedData.telegram_id,
        is_admin: 0,
      });

      const referrerId = req.query.ref ? parseInt(req.query.ref as string) : null;
      if (referrerId) {
        const referrer = storage.users.findById(referrerId);
        if (referrer) {
          const bonusAmount = 50;
          storage.referrals.create({
            referrer_id: referrerId,
            referred_id: user.id,
            bonus_earned: bonusAmount,
          });
          
          storage.users.update(referrerId, {
            referral_balance: (referrer.referral_balance || 0) + bonusAmount,
          });

          storage.transactions.create({
            user_id: referrerId,
            amount: bonusAmount,
            description: `–†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å –∑–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è #${user.id}`,
          });
        }
      }

      res.json({ message: "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞" });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏" });
    }
  });

  app.post("/api/auth/login", async (req, res) => {
    try {
      const validatedData = loginSchema.parse(req.body);

      const user = storage.users.findByEmail(validatedData.email);
      if (!user || !user.password) {
        return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      }

      const isValidPassword = await bcrypt.compare(validatedData.password, user.password);
      if (!isValidPassword) {
        return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å" });
      }

      if (user.telegram_2fa_enabled === 1 && user.telegram_id) {
        const code = generate2FACode();
        const expiresAt = new Date(Date.now() + 5 * 60 * 1000).toISOString();

        storage.users.update(user.id, {
          twofactor_challenge_code: code,
          twofactor_challenge_expires_at: expiresAt,
        });

        await sendTelegramMessage(
          user.telegram_id,
          `üîê <b>–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ ARMT VPN:</b>\n\n` +
          `<code>${code}</code>\n\n` +
          `–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.`
        );

        req.session.requires2FA = true;
        req.session.pendingUserId = user.id;

        return res.json({
          requires2FA: true,
          message: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram",
        });
      }

      req.session.userId = user.id;
      
      // –Ø–≤–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–µ—Å—Å–∏—é –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
      req.session.save((err) => {
        if (err) {
          console.error('Session save error:', err);
          return res.status(500).json({ message: "–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏" });
        }
        
        const { password, ...userWithoutPassword } = user;
        res.json({ user: userWithoutPassword });
      });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞" });
    }
  });

  app.post("/api/auth/logout", (req, res) => {
    req.session.destroy((err) => {
      if (err) {
        return res.status(500).json({ message: "–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞" });
      }
      res.json({ message: "–í—ã—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω" });
    });
  });

  app.get("/api/user/me", requireAuth, (req, res) => {
    const user = storage.users.findById(req.session.userId!);
    if (!user) {
      return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }
    const { password, ...userWithoutPassword } = user;
    res.json(userWithoutPassword);
  });

  app.patch("/api/user/profile", requireAuth, async (req, res) => {
    try {
      let { nickname } = req.body;
      const userId = req.session.userId!;

      if (typeof nickname !== 'string') {
        return res.status(400).json({ message: "–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π" });
      }

      nickname = nickname.trim();

      if (nickname.length < 3) {
        return res.status(400).json({ message: "–ù–∏–∫–Ω–µ–π–º –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞" });
      }

      if (nickname.length > 20) {
        return res.status(400).json({ message: "–ù–∏–∫–Ω–µ–π–º –Ω–µ –¥–æ–ª–∂–µ–Ω –ø—Ä–µ–≤—ã—à–∞—Ç—å 20 —Å–∏–º–≤–æ–ª–æ–≤" });
      }

      const existingUser = storage.users.list().find(u => 
        u.nickname === nickname && u.id !== userId
      );
      if (existingUser) {
        return res.status(400).json({ message: "–ù–∏–∫–Ω–µ–π–º —É–∂–µ –∑–∞–Ω—è—Ç" });
      }

      const updatedUser = storage.users.update(userId, { nickname });
      
      if (!updatedUser) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const { password, ...userWithoutPassword } = updatedUser;
      res.json({
        message: "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω",
        user: userWithoutPassword,
      });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è" });
    }
  });

  app.post("/api/user/change-password", requireAuth, async (req, res) => {
    try {
      const validatedData = changePasswordSchema.parse(req.body);
      const userId = req.session.userId!;
      const user = storage.users.findById(userId);

      if (!user || !user.password) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const isValidPassword = await bcrypt.compare(validatedData.current_password, user.password);
      if (!isValidPassword) {
        return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–µ–∫—É—â–∏–π –ø–∞—Ä–æ–ª—å" });
      }

      const hashedPassword = await bcrypt.hash(validatedData.new_password, 10);
      storage.users.update(userId, { password: hashedPassword });

      res.json({ message: "–ü–∞—Ä–æ–ª—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω" });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã –ø–∞—Ä–æ–ª—è" });
    }
  });

  app.post("/api/user/change-email", requireAuth, async (req, res) => {
    try {
      const validatedData = changeEmailSchema.parse(req.body);
      const userId = req.session.userId!;
      const user = storage.users.findById(userId);

      if (!user || !user.password) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const isValidPassword = await bcrypt.compare(validatedData.password, user.password);
      if (!isValidPassword) {
        return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" });
      }

      const existingUser = storage.users.findByEmail(validatedData.new_email);
      if (existingUser) {
        return res.status(400).json({ message: "Email —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è" });
      }

      storage.users.update(userId, { email: validatedData.new_email });
      res.json({ message: "Email —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω" });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ —Å–º–µ–Ω—ã email" });
    }
  });

  app.get("/api/vpn/profiles", requireAuth, (req, res) => {
    const profiles = storage.vpnProfiles.findByUserId(req.session.userId!);
    res.json(profiles);
  });

  app.delete("/api/vpn/profiles/:id", requireAuth, (req, res) => {
    const profileId = parseInt(req.params.id);
    const profiles = storage.vpnProfiles.findByUserId(req.session.userId!);
    const profile = profiles.find(p => p.id === profileId);
    
    if (!profile) {
      return res.status(404).json({ message: "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const success = storage.vpnProfiles.delete(profileId);
    if (success) {
      res.json({ message: "–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ" });
    } else {
      res.status(500).json({ message: "–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ" });
    }
  });

  app.get("/api/referrals", requireAuth, (req, res) => {
    const referrals = storage.referrals.findByReferrerId(req.session.userId!);
    res.json(referrals);
  });

  app.get("/api/transactions", requireAuth, (req, res) => {
    const transactions = storage.transactions.findByUserId(req.session.userId!);
    res.json(transactions);
  });

  app.post("/api/balance/deposit", requireAuth, async (req, res) => {
    try {
      const { amount } = req.body;
      const userId = req.session.userId!;

      if (!amount || amount <= 0) {
        return res.status(400).json({ message: "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è" });
      }

      const user = storage.users.findById(userId);
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const updatedUser = storage.users.update(userId, {
        main_balance: (user.main_balance || 0) + amount,
      });

      storage.transactions.create({
        user_id: userId,
        amount: amount,
        description: `–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞`,
      });

      const { password, ...userWithoutPassword } = updatedUser!;
      res.json({ 
        message: "–ë–∞–ª–∞–Ω—Å —É—Å–ø–µ—à–Ω–æ –ø–æ–ø–æ–ª–Ω–µ–Ω",
        user: userWithoutPassword,
      });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞" });
    }
  });

  app.get("/api/admin/stats", requireAdmin, (req, res) => {
    const stats = storage.stats.getStats();
    res.json(stats);
  });

  app.get("/api/admin/users", requireAdmin, (req, res) => {
    const users = storage.users.list().map(u => {
      const { password, ...userWithoutPassword } = u;
      return userWithoutPassword;
    });
    res.json(users);
  });

  app.get("/api/admin/servers", requireAdmin, (req, res) => {
    const servers = storage.servers.list();
    res.json(servers);
  });

  app.post("/api/admin/servers", requireAdmin, async (req, res) => {
    try {
      const validatedData = insertServerSchema.parse(req.body);
      const server = storage.servers.create(validatedData);
      res.json(server);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  app.patch("/api/admin/servers/:id", requireAdmin, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const server = storage.servers.update(id, req.body);
      if (!server) {
        return res.status(404).json({ message: "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      res.json(server);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  app.delete("/api/admin/servers/:id", requireAdmin, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const deleted = storage.servers.delete(id);
      if (!deleted) {
        return res.status(404).json({ message: "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      res.json({ message: "–°–µ—Ä–≤–µ—Ä —É–¥–∞–ª–µ–Ω" });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Ä–≤–µ—Ä–∞" });
    }
  });

  app.get("/api/tariffs", requireAuth, (req, res) => {
    const tariffs = storage.tariffs.list().filter(t => t.is_active === 1);
    res.json(tariffs);
  });

  app.post("/api/subscription/purchase", requireAuth, async (req, res) => {
    try {
      const { tariffId, promoCode } = req.body;
      
      if (!tariffId) {
        return res.status(400).json({ message: "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–∞—Ä–∏—Ñ" });
      }
      
      const tariff = storage.tariffs.findById(tariffId);
      if (!tariff) {
        return res.status(404).json({ message: "–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      const user = storage.users.findById(req.session.userId!);
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      let finalPrice = tariff.price;
      let discountApplied = 0;
      let promoToIncrement: string | null = null;
      
      if (promoCode) {
        const promo = storage.promocodes.findByCode(promoCode.toUpperCase());
        
        if (!promo) {
          return res.status(400).json({ message: "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
        }
        
        if (promo.is_active !== 1) {
          return res.status(400).json({ message: "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–∞–∫—Ç–∏–≤–µ–Ω" });
        }
        
        if (promo.uses_count >= promo.max_uses) {
          return res.status(400).json({ message: "–ü—Ä–æ–º–æ–∫–æ–¥ –∏—Å—á–µ—Ä–ø–∞–Ω" });
        }
        
        discountApplied = Math.round(tariff.price * (promo.discount_percent / 100) * 100) / 100;
        finalPrice = tariff.price - discountApplied;
        
        promoToIncrement = promoCode.toUpperCase();
      }
      
      if (user.main_balance < finalPrice) {
        return res.status(400).json({ message: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ" });
      }
      
      const newBalance = (user.main_balance || 0) - finalPrice;
      const currentExpires = user.expires_at && new Date(user.expires_at) > new Date() 
        ? new Date(user.expires_at) 
        : new Date();
      
      const newExpires = new Date(currentExpires.getTime() + tariff.days * 24 * 60 * 60 * 1000);
      
      storage.users.update(req.session.userId!, {
        main_balance: newBalance,
        subscription_type: tariff.key,
        expires_at: newExpires.toISOString(),
      });
      
      const description = promoCode 
        ? `–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ "${tariff.name}" (–ø—Ä–æ–º–æ–∫–æ–¥ ${promoCode}, —Å–∫–∏–¥–∫–∞ ${discountApplied}‚ÇΩ)`
        : `–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ "${tariff.name}"`;
      
      storage.transactions.create({
        user_id: req.session.userId!,
        amount: -finalPrice,
        description,
      });
      
      if (promoToIncrement) {
        storage.promocodes.incrementUses(promoToIncrement);
      }
      
      res.json({ 
        message: promoCode 
          ? `–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞! –°–∫–∏–¥–∫–∞ ${discountApplied}‚ÇΩ` 
          : "–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞",
        expires_at: newExpires.toISOString(),
        discount: discountApplied,
        final_price: finalPrice,
      });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–∫—É–ø–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏" });
    }
  });

  app.get("/api/admin/tariffs", requireAdmin, (req, res) => {
    const tariffs = storage.tariffs.list();
    res.json(tariffs);
  });

  app.post("/api/admin/tariffs", requireAdmin, async (req, res) => {
    try {
      const validatedData = insertTariffSchema.parse(req.body);
      const tariff = storage.tariffs.create(validatedData);
      res.json(tariff);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞" });
    }
  });

  app.patch("/api/admin/tariffs/:id", requireAdmin, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const tariff = storage.tariffs.update(id, req.body);
      if (!tariff) {
        return res.status(404).json({ message: "–¢–∞—Ä–∏—Ñ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      res.json(tariff);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞—Ä–∏—Ñ–∞" });
    }
  });

  app.get("/api/admin/promocodes", requireAdmin, (req, res) => {
    const promocodes = storage.promocodes.list();
    res.json(promocodes);
  });

  app.post("/api/admin/promocodes", requireAdmin, async (req, res) => {
    try {
      const validatedData = insertPromocodeSchema.parse(req.body);
      const promocode = storage.promocodes.create(validatedData);
      res.json(promocode);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞" });
    }
  });

  app.patch("/api/admin/promocodes/:code", requireAdmin, async (req, res) => {
    try {
      const code = req.params.code;
      const promocode = storage.promocodes.update(code, req.body);
      if (!promocode) {
        return res.status(404).json({ message: "–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      res.json(promocode);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞" });
    }
  });

  app.patch("/api/admin/users/:id", requireAdmin, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const user = storage.users.update(id, req.body);
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      const { password, ...userWithoutPassword } = user;
      res.json(userWithoutPassword);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
    }
  });

  app.get("/api/support-tickets", requireAuth, (req, res) => {
    try {
      const tickets = storage.supportTickets.findByUserId(req.session.userId!);
      res.json(tickets);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤" });
    }
  });

  app.post("/api/support-tickets", requireAuth, async (req, res) => {
    try {
      const validatedData = insertSupportTicketSchema.parse({
        ...req.body,
        user_id: req.session.userId!,
      });
      const ticket = storage.supportTickets.create(validatedData);
      res.json(ticket);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞" });
    }
  });

  app.get("/api/admin/support-tickets", requireAdmin, (req, res) => {
    try {
      const tickets = storage.supportTickets.list();
      res.json(tickets);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∏–∫–µ—Ç–æ–≤" });
    }
  });

  app.patch("/api/admin/support-tickets/:id", requireAdmin, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const validatedData = updateSupportTicketSchema.parse(req.body);
      const ticket = storage.supportTickets.update(id, validatedData);
      if (!ticket) {
        return res.status(404).json({ message: "–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      res.json(ticket);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∏–∫–µ—Ç–∞" });
    }
  });

  app.get("/api/support-tickets/:id/messages", requireAuth, (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const ticket = storage.supportTickets.findById(id);
      if (!ticket) {
        return res.status(404).json({ message: "–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      if (ticket.user_id !== req.session.userId) {
        const user = storage.users.findById(req.session.userId!);
        if (!user || user.is_admin !== 1) {
          return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
        }
      }
      const messages = storage.supportMessages.findByTicketId(id);
      res.json(messages);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π" });
    }
  });

  app.post("/api/support-tickets/:id/messages", requireAuth, async (req, res) => {
    try {
      const id = parseInt(req.params.id);
      const ticket = storage.supportTickets.findById(id);
      if (!ticket) {
        return res.status(404).json({ message: "–¢–∏–∫–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }
      
      const user = storage.users.findById(req.session.userId!);
      const isAdmin = user?.is_admin === 1;
      
      if (!isAdmin && ticket.user_id !== req.session.userId) {
        return res.status(403).json({ message: "–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω" });
      }
      
      const validatedData = insertSupportMessageSchema.parse({
        ticket_id: id,
        is_admin: isAdmin ? 1 : 0,
        message: req.body.message,
      });
      
      const message = storage.supportMessages.create(validatedData);
      res.json(message);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è" });
    }
  });

  app.post("/api/telegram/verify-2fa", async (req, res) => {
    try {
      const { code } = req.body;

      if (!req.session.requires2FA || !req.session.pendingUserId) {
        return res.status(400).json({ message: "–°–µ—Å—Å–∏—è 2FA –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      const user = storage.users.findById(req.session.pendingUserId);
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (!user.twofactor_challenge_code || !user.twofactor_challenge_expires_at) {
        return res.status(400).json({ message: "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const expiresAt = new Date(user.twofactor_challenge_expires_at);
      if (expiresAt < new Date()) {
        return res.status(400).json({ message: "–ö–æ–¥ –∏—Å—Ç–µ–∫" });
      }

      if (code !== user.twofactor_challenge_code) {
        return res.status(401).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
      }

      storage.users.update(user.id, {
        twofactor_challenge_code: null,
        twofactor_challenge_expires_at: null,
      });

      req.session.userId = user.id;
      req.session.requires2FA = undefined;
      req.session.pendingUserId = undefined;

      const { password, ...userWithoutPassword } = user;
      res.json({ user: userWithoutPassword });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏" });
    }
  });

  app.post("/api/telegram/send-code", async (req, res) => {
    try {
      if (!req.session.requires2FA || !req.session.pendingUserId) {
        return res.status(400).json({ message: "–°–µ—Å—Å–∏—è 2FA –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" });
      }

      const user = storage.users.findById(req.session.pendingUserId);
      if (!user || !user.telegram_id) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const code = generate2FACode();
      const expiresAt = new Date(Date.now() + 5 * 60 * 1000).toISOString();

      storage.users.update(user.id, {
        twofactor_challenge_code: code,
        twofactor_challenge_expires_at: expiresAt,
      });

      await sendTelegramMessage(
        user.telegram_id,
        `üîê <b>–ö–æ–¥ –¥–ª—è –≤—Ö–æ–¥–∞ –≤ ARMT VPN:</b>\n\n` +
        `<code>${code}</code>\n\n` +
        `–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 5 –º–∏–Ω—É—Ç.`
      );

      res.json({ message: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram" });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–¥–∞" });
    }
  });

  app.post("/api/telegram/link", requireAuth, async (req, res) => {
    try {
      const { linkCode } = req.body;
      const userId = req.session.userId!;

      if (!linkCode || linkCode.length !== 8) {
        return res.status(400).json({ message: "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞" });
      }

      const user = storage.users.findById(userId);
      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      const telegramUser = storage.users.list().find(
        u => u.telegram_link_code === linkCode.toUpperCase() && 
             u.telegram_id && 
             u.id !== userId
      );

      if (!telegramUser || !telegramUser.telegram_link_expires_at) {
        return res.status(404).json({ message: "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫" });
      }

      const expiresAt = new Date(telegramUser.telegram_link_expires_at);
      if (expiresAt < new Date()) {
        return res.status(400).json({ message: "–ö–æ–¥ –∏—Å—Ç–µ–∫" });
      }

      storage.users.update(userId, {
        telegram_id: telegramUser.telegram_id,
        telegram_username: telegramUser.telegram_username,
        telegram_link_code: null,
        telegram_link_expires_at: null,
      });

      if (telegramUser.email === null && telegramUser.password === null) {
        storage.users.update(telegramUser.id, {
          telegram_link_code: null,
          telegram_link_expires_at: null,
        });
      }

      if (telegramUser.telegram_id) {
        await sendTelegramMessage(
          telegramUser.telegram_id,
          "‚úÖ –í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å ARMT VPN!"
        );
      }

      res.json({ message: "–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–≤—è–∑–∞–Ω —Å Telegram" });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ —Å–≤—è–∑—ã–≤–∞–Ω–∏—è" });
    }
  });

  app.post("/api/telegram/enable-2fa", requireAuth, async (req, res) => {
    try {
      const userId = req.session.userId!;
      const user = storage.users.findById(userId);

      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      if (!user.telegram_id) {
        return res.status(400).json({ message: "–°–Ω–∞—á–∞–ª–∞ —Å–≤—è–∂–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç —Å Telegram" });
      }

      storage.users.update(userId, {
        telegram_2fa_enabled: 1,
      });

      await sendTelegramMessage(
        user.telegram_id,
        "üîê –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –≤–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ARMT VPN."
      );

      res.json({ message: "2FA —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞" });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è 2FA" });
    }
  });

  app.post("/api/telegram/disable-2fa", requireAuth, async (req, res) => {
    try {
      const userId = req.session.userId!;
      const user = storage.users.findById(userId);

      if (!user) {
        return res.status(404).json({ message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
      }

      storage.users.update(userId, {
        telegram_2fa_enabled: 0,
      });

      if (user.telegram_id) {
        await sendTelegramMessage(
          user.telegram_id,
          "üîì –î–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–∞ –¥–ª—è –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ ARMT VPN."
        );
      }

      res.json({ message: "2FA —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–∞" });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è 2FA" });
    }
  });

  app.post("/api/telegram/webhook", async (req, res) => {
    try {
      const update: TelegramUpdate = req.body;
      await handleTelegramUpdate(update);
      res.json({ ok: true });
    } catch (error: any) {
      console.error("Webhook error:", error);
      res.status(500).json({ ok: false });
    }
  });

  app.get("/api/admin/settings", requireAdmin, (req, res) => {
    try {
      const settings = storage.settings.getAll();
      res.json(settings);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫" });
    }
  });

  app.put("/api/admin/settings", requireAdmin, (req, res) => {
    try {
      const validatedData = updateSiteSettingSchema.parse(req.body);
      storage.settings.set(validatedData.key, validatedData.value);
      res.json({ message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞" });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏" });
    }
  });

  app.get("/api/admin/bot-settings", requireAdmin, (req, res) => {
    try {
      const settings = storage.botSettings.getAll();
      res.json(settings);
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –±–æ—Ç–∞" });
    }
  });

  app.put("/api/admin/bot-settings", requireAdmin, (req, res) => {
    try {
      const validatedData = updateBotSettingSchema.parse(req.body);
      storage.botSettings.set(validatedData.key, validatedData.value);
      res.json({ message: "–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞" });
    } catch (error: any) {
      res.status(400).json({ message: error.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞" });
    }
  });

  // License routes
  app.use(licenseRoutes);

  const httpServer = createServer(app);
  return httpServer;
}
