import crypto from "crypto";
import storage from "./storage";

const TELEGRAM_BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN || "";
const TELEGRAM_API_URL = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}`;

export interface TelegramMessage {
  message_id: number;
  from: {
    id: number;
    first_name: string;
    username?: string;
  };
  chat: {
    id: number;
  };
  text?: string;
}

export interface TelegramUpdate {
  update_id: number;
  message?: TelegramMessage;
}

export async function sendTelegramMessage(chatId: number, text: string): Promise<boolean> {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/sendMessage`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        parse_mode: "HTML",
      }),
    });
    
    const data = await response.json();
    return data.ok;
  } catch (error) {
    console.error("Error sending Telegram message:", error);
    return false;
  }
}

export function generateLinkCode(): string {
  return crypto.randomBytes(4).toString("hex").toUpperCase();
}

export function generate2FACode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString();
}

export async function setWebhook(webhookUrl: string): Promise<boolean> {
  try {
    const response = await fetch(`${TELEGRAM_API_URL}/setWebhook`, {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ url: webhookUrl }),
    });
    
    const data = await response.json();
    console.log("Webhook setup:", data);
    return data.ok;
  } catch (error) {
    console.error("Error setting webhook:", error);
    return false;
  }
}

export async function handleTelegramUpdate(update: TelegramUpdate): Promise<void> {
  const message = update.message;
  if (!message || !message.text) return;

  const chatId = message.chat.id;
  const telegramId = message.from.id;
  const text = message.text.trim();

  if (text === "/start") {
    await sendTelegramMessage(
      chatId,
      "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ ARMT VPN!\n\n" +
      "–≠—Ç–æ—Ç –±–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏.\n\n" +
      "–ö–æ–º–∞–Ω–¥—ã:\n" +
      "/link - –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å Telegram\n" +
      "/help - –°–ø—Ä–∞–≤–∫–∞"
    );
    return;
  }

  if (text === "/help") {
    await sendTelegramMessage(
      chatId,
      "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É ARMT VPN</b>\n\n" +
      "<b>/start</b> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n" +
      "<b>/link</b> - –°–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç —Å Telegram\n" +
      "<b>/help</b> - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n\n" +
      "–î–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è 2FA –∑–∞–π–¥–∏—Ç–µ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ —Å–∞–π—Ç–µ."
    );
    return;
  }

  if (text === "/link") {
    const linkCode = generateLinkCode();
    const expiresAt = new Date(Date.now() + 10 * 60 * 1000).toISOString();

    const existingUser = storage.users.findByTelegramId(telegramId);
    if (existingUser) {
      storage.users.update(existingUser.id, {
        telegram_link_code: linkCode,
        telegram_link_expires_at: expiresAt,
      });
    } else {
      const tempUser = storage.users.create({
        telegram_id: telegramId,
        telegram_username: message.from.username,
        telegram_link_code: linkCode,
        telegram_link_expires_at: expiresAt,
      });
    }

    await sendTelegramMessage(
      chatId,
      `üîó <b>–ö–æ–¥ –¥–ª—è —Å–≤—è–∑—ã–≤–∞–Ω–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞:</b>\n\n` +
      `<code>${linkCode}</code>\n\n` +
      `–í–≤–µ–¥–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –Ω–∞ —Å–∞–π—Ç–µ ARMT VPN.\n` +
      `–ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.`
    );
    return;
  }

  const user = storage.users.findByTelegramId(telegramId);
  if (user && user.telegram_2fa_enabled) {
    if (user.twofactor_challenge_code && user.twofactor_challenge_expires_at) {
      const expiresAt = new Date(user.twofactor_challenge_expires_at);
      if (expiresAt > new Date()) {
        if (text === user.twofactor_challenge_code) {
          storage.users.update(user.id, {
            twofactor_challenge_code: null,
            twofactor_challenge_expires_at: null,
          });
          await sendTelegramMessage(
            chatId,
            "‚úÖ –ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏ –Ω–∞ —Å–∞–π—Ç."
          );
        } else {
          await sendTelegramMessage(
            chatId,
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ."
          );
        }
        return;
      }
    }
  }

  await sendTelegramMessage(
    chatId,
    "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
  );
}
